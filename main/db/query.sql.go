// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, hashed_password
) VALUES (
  ?, ?
)
RETURNING id, username, hashed_password, session_token, csrf_token, created_at, updated_at
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.SessionToken,
		&i.CsrfToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = ?
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, session_token, csrf_token, created_at, updated_at FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.SessionToken,
		&i.CsrfToken,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserTokensLogin = `-- name: UpdateUserTokensLogin :exec
UPDATE users
set session_token = ?,
csrf_token = ?
WHERE username = ?
`

type UpdateUserTokensLoginParams struct {
	SessionToken sql.NullString
	CsrfToken    sql.NullString
	Username     string
}

func (q *Queries) UpdateUserTokensLogin(ctx context.Context, arg UpdateUserTokensLoginParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTokensLogin, arg.SessionToken, arg.CsrfToken, arg.Username)
	return err
}

const updateUserTokensLogout = `-- name: UpdateUserTokensLogout :exec
UPDATE users
set session_token = "",
csrf_token = ""
WHERE username = ?
`

func (q *Queries) UpdateUserTokensLogout(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, updateUserTokensLogout, username)
	return err
}
