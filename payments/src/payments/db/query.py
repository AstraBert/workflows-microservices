# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.30.0
# source: query.sql
import decimal
from typing import Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from payments.db import models


CREATE_PAYMENT = """-- name: create_payment \\:one
INSERT INTO payments (
  user_id, status, method, amount
) VALUES (
  :p1, :p2, :p3, :p4
)
RETURNING payment_id, user_id, payment_time, status, method, amount
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_payment(self, *, user_id: str, status: str, method: str, amount: Optional[decimal.Decimal]) -> Optional[models.Payment]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_PAYMENT), {
            "p1": user_id,
            "p2": status,
            "p3": method,
            "p4": amount,
        })).first()
        if row is None:
            return None
        return models.Payment(
            payment_id=row[0],
            user_id=row[1],
            payment_time=row[2],
            status=row[3],
            method=row[4],
            amount=row[5],
        )
