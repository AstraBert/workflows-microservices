# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.30.0
# source: query.sql
import pydantic
from typing import Any, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from orders.db import models


CREATE_ORDER = """-- name: create_order \\:one
INSERT INTO orders (
  user_id, user_name, email, phone, shipping_address, status
) VALUES (
  ?, ?, ?, ?, ?, ?
)
RETURNING order_id, user_id, user_name, email, phone, order_time, status, shipping_address
"""


class CreateOrderParams(pydantic.BaseModel):
    user_id: Any
    user_name: Any
    email: Any
    phone: Any
    shipping_address: Any
    status: Any


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_order(self, arg: CreateOrderParams) -> Optional[models.Order]:
        row = (await self._conn.execute(sqlalchemy.text(CREATE_ORDER), {
            "p1": arg.user_id,
            "p2": arg.user_name,
            "p3": arg.email,
            "p4": arg.phone,
            "p5": arg.shipping_address,
            "p6": arg.status,
        })).first()
        if row is None:
            return None
        return models.Order(
            order_id=row[0],
            user_id=row[1],
            user_name=row[2],
            email=row[3],
            phone=row[4],
            order_time=row[5],
            status=row[6],
            shipping_address=row[7],
        )
