# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.30.0
# source: query.sql
from typing import Any, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from stock.db import models


GET_STOCK_ITEM = """-- name: get_stock_item \\:one
SELECT id, item, available_number, updated_at FROM stock
WHERE item = ? LIMIT 1
"""


INSERT_SEED_DATA = """-- name: insert_seed_data \\:exec
INSERT OR IGNORE INTO stock (item, available_number) VALUES
    ('T-Shirt', 100),
    ('Socks', 100),
    ('Mug', 100)
"""


UPDATE_STOCK_ITEM = """-- name: update_stock_item \\:exec
UPDATE stock
set available_number = ?
WHERE item = ?
"""


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_stock_item(self, *, item: Any) -> Optional[models.Stock]:
        row = (await self._conn.execute(sqlalchemy.text(GET_STOCK_ITEM), {"p1": item})).first()
        if row is None:
            return None
        return models.Stock(
            id=row[0],
            item=row[1],
            available_number=row[2],
            updated_at=row[3],
        )

    async def insert_seed_data(self) -> None:
        await self._conn.execute(sqlalchemy.text(INSERT_SEED_DATA))

    async def update_stock_item(self, *, available_number: Any, item: Any) -> None:
        await self._conn.execute(sqlalchemy.text(UPDATE_STOCK_ITEM), {"p1": available_number, "p2": item})
